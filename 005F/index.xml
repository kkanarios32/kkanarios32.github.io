<?xml version="1.0" encoding="UTF-8"?>
<?xml-stylesheet type="text/xsl" href="/default.xsl"?>
<fr:tree xmlns:fr="http://www.forester-notes.org" xmlns:html="http://www.w3.org/1999/xhtml" xmlns:xml="http://www.w3.org/XML/1998/namespace" root="false" base-url="/">
  <fr:frontmatter>
    <fr:authors>
      <fr:author>
        <fr:link href="/kellenkanarios/" title="Kellen Kanarios" uri="https://kellenkanarios.com/kellenkanarios/" display-uri="kellenkanarios" type="local">Kellen Kanarios</fr:link>
      </fr:author>
    </fr:authors>
    <fr:date>
      <fr:year>2025</fr:year>
      <fr:month>3</fr:month>
      <fr:day>4</fr:day>
    </fr:date>
    <fr:uri>https://kellenkanarios.com/005F/</fr:uri>
    <fr:display-uri>005F</fr:display-uri>
    <fr:route>/005F/</fr:route>
    <fr:title text="Rebuilding My (Neo)Vim Config From Scratch">Rebuilding My (Neo)Vim Config From Scratch</fr:title>
  </fr:frontmatter>
  <fr:mainmatter><html:p>I have been using LazyVim for some time now, but I have now run into issues multiple times where understanding how LazyVim is doing something is far more difficult than if I had written my own setup. I allocated one day for this adventure and really just wanted to make sure I had support for <fr:tex display="inline"><![CDATA[\TeX ]]></fr:tex>, python, forester, and C/C++. Due to my (self-imposed) time constraint, I do not have the associated resources linked for each of the things discussed below. At some point, I hope to come back and more thoroughly cover each of the components.
</html:p>
  <fr:tree show-metadata="false"><fr:frontmatter><fr:authors><fr:author><fr:link href="/kellenkanarios/" title="Kellen Kanarios" uri="https://kellenkanarios.com/kellenkanarios/" display-uri="kellenkanarios" type="local">Kellen Kanarios</fr:link></fr:author></fr:authors><fr:date><fr:year>2025</fr:year><fr:month>3</fr:month><fr:day>4</fr:day></fr:date><fr:title text="Sane Defaults">Sane Defaults</fr:title></fr:frontmatter><fr:mainmatter>
To my surprise, a lot of the features that I had come to take for granted were actually options set up internally by Lazyvim. For example, I was shocked with 8 space indents!! and I could not even copy from one terminal instance to another... Due to this, I went and found all of the options I liked from Lazyvim and added them to my new configuration in <html:code>configs/options.lua</html:code>.
</fr:mainmatter></fr:tree>

  <fr:tree show-metadata="false"><fr:frontmatter><fr:authors><fr:author><fr:link href="/kellenkanarios/" title="Kellen Kanarios" uri="https://kellenkanarios.com/kellenkanarios/" display-uri="kellenkanarios" type="local">Kellen Kanarios</fr:link></fr:author></fr:authors><fr:date><fr:year>2025</fr:year><fr:month>3</fr:month><fr:day>4</fr:day></fr:date><fr:title text="Installing a Plugin Manager">Installing a Plugin Manager</fr:title></fr:frontmatter><fr:mainmatter>
For this, we will be using the defacto standard <html:code>lazy.nvim</html:code>. This is actually straightforward and kind of "just works". Just follow the installation guide in their documentation.
</fr:mainmatter></fr:tree>

  <fr:tree show-metadata="false"><fr:frontmatter><fr:authors><fr:author><fr:link href="/kellenkanarios/" title="Kellen Kanarios" uri="https://kellenkanarios.com/kellenkanarios/" display-uri="kellenkanarios" type="local">Kellen Kanarios</fr:link></fr:author></fr:authors><fr:date><fr:year>2025</fr:year><fr:month>3</fr:month><fr:day>4</fr:day></fr:date><fr:title text="Setting up Auto Complete">Setting up Auto Complete</fr:title></fr:frontmatter><fr:mainmatter>
This is one of the main motivations for me making the switch. It seems <html:code>nvim-cmp</html:code> has finally been replaced with a new <html:code>blink.cmp</html:code>, so that is what we will be using.


  <fr:tree show-metadata="false"><fr:frontmatter><fr:authors><fr:author><fr:link href="/kellenkanarios/" title="Kellen Kanarios" uri="https://kellenkanarios.com/kellenkanarios/" display-uri="kellenkanarios" type="local">Kellen Kanarios</fr:link></fr:author></fr:authors><fr:date><fr:year>2025</fr:year><fr:month>3</fr:month><fr:day>4</fr:day></fr:date><fr:title text="Rebuilding My (Neo)Vim Config From Scratch › Language Server Protocol"><fr:link href="/005F/" title="Rebuilding My (Neo)Vim Config From Scratch" uri="https://kellenkanarios.com/005F/" display-uri="005F" type="local">Rebuilding My (Neo)Vim Config From Scratch</fr:link> › Language Server Protocol</fr:title></fr:frontmatter><fr:mainmatter>
It turns out there is a lot that goes into getting LSP setup correctly.
<html:ol><html:li>First we must actually install the language servers. To do this the easiest way, we use the <html:code>mason.nvim</html:code> and <html:code>mason.nvim-lspconfig</html:code> plugins. At some point, I might actually figure out how to set up lsp myself without lspconfig but that point is not now.
</html:li>
<html:li>Through <html:code>nvim-lspconfig</html:code>, we can set up each of the servers we want to have LSP support. I just set up clangd, pyright, and texlab.</html:li></html:ol>
This was a bit ridiculous. The first of many challenges was around import resolution in python. To remedy this, I needed to write a function to find the virtual environment directory and then set the <html:code>pythonPath</html:code> to the venv python binary. Previously, I think I was just using pylsp and installing it as a pip package to each python venv. I much prefer the new way, and I think pyright is overall a much better lsp.
</fr:mainmatter></fr:tree>


  <fr:tree show-metadata="false"><fr:frontmatter><fr:authors><fr:author><fr:link href="/kellenkanarios/" title="Kellen Kanarios" uri="https://kellenkanarios.com/kellenkanarios/" display-uri="kellenkanarios" type="local">Kellen Kanarios</fr:link></fr:author></fr:authors><fr:date><fr:year>2025</fr:year><fr:month>3</fr:month><fr:day>4</fr:day></fr:date><fr:title text="Rebuilding My (Neo)Vim Config From Scratch › Forester Completion"><fr:link href="/005F/" title="Rebuilding My (Neo)Vim Config From Scratch" uri="https://kellenkanarios.com/005F/" display-uri="005F" type="local">Rebuilding My (Neo)Vim Config From Scratch</fr:link> › Forester Completion</fr:title></fr:frontmatter><fr:mainmatter>
  Another necessary completion source for me is the one provided by <html:code>forester.nvim</html:code>. Similar to vimtex, the reference completion support is VERY useful. Obviously, I need completion when I am writing this blog!!! This was a little more involved. The first difficulty was that the completion source provided by the <html:code>forester.nvim</html:code> plugin was for <html:code>nvim-cmp</html:code>. It turns out this is a prevalent enough problem that the author of <html:code>blink.cmp</html:code> wrote an additional plugin <html:code>blink.compat</html:code> to allow for <html:code>nvim-cmp</html:code> completion sources. While this sounds all fine and good, <html:code>nvim-compat</html:code> expects plugins that return the completion source themselves, whereas in <html:code>forester.nvim</html:code> the completion source is just one submodule of a more feature-rich plugin. To get around this, I needed to look into the <html:code>blink.compat</html:code> code and find how they are registering the sources and just do it myself.
</fr:mainmatter></fr:tree>

</fr:mainmatter></fr:tree>

  <fr:tree show-metadata="false"><fr:frontmatter><fr:authors><fr:author><fr:link href="/kellenkanarios/" title="Kellen Kanarios" uri="https://kellenkanarios.com/kellenkanarios/" display-uri="kellenkanarios" type="local">Kellen Kanarios</fr:link></fr:author></fr:authors><fr:date><fr:year>2025</fr:year><fr:month>3</fr:month><fr:day>4</fr:day></fr:date><fr:title text="Snippets">Snippets</fr:title></fr:frontmatter><fr:mainmatter>
  <html:p>
  Going all the way back to the <fr:link href="https://castel.dev/post/lecture-notes-1/" type="external">Gilles Castel blog post</fr:link>, I have always been partial to snippets that auto-expand. I had them set up prior to Lazyvim but with Lazyvim I had resigned to using friendly-snippets with native nvim snippets. Since I was already redoing everything, this time around I decided not to compromise. Once upon a time (right when it came out I think?) I tried out Luasnips, but it seems that they now have far more extensive features. They are also natively supported by <html:code>blink.cmp</html:code>!! It feels necessary that I plug the <fr:link href="https://github.com/iurimateus/luasnip-latex-snippets.nvim" type="external">awesome repo</fr:link> that ports the original Ultisnips snippets to Luasnip. With this, I was able to easily add my own forester snippets!!!
  </html:p>
  <html:p>
  A fun little thing that I had been hoping to do for awhile and is finally now possible - I can load latex snippets when inside math environments in forester!!!! To do this, I looked into the forester treesitter grammar and found the corresponding nodetypes for math envs. It was then straightforward to detect whether we were in a math env and to load the associated latex snippets.
  </html:p>
</fr:mainmatter></fr:tree>

  <fr:tree show-metadata="false"><fr:frontmatter><fr:authors><fr:author><fr:link href="/kellenkanarios/" title="Kellen Kanarios" uri="https://kellenkanarios.com/kellenkanarios/" display-uri="kellenkanarios" type="local">Kellen Kanarios</fr:link></fr:author></fr:authors><fr:date><fr:year>2025</fr:year><fr:month>3</fr:month><fr:day>4</fr:day></fr:date><fr:title text="Anki">Anki</fr:title></fr:frontmatter><fr:mainmatter>
  <html:p>
  There is a very cool add-on to anki called <fr:link href="https://git.sr.ht/~foosoft/anki-connectdeck-actions" type="external">AnkiConnect</fr:link> that has an associated plugin <html:code>anki.nvim</html:code>. Basically, AnkiConnects allows you to make requests to Anki and receive/send useful information from/to your decks. Unfortunately, <html:code>anki.nvim</html:code> built-in commands didn't seem all that useful to me. However, it provided the necessary infrastructure for me to accomplish my desired workflow.
  </html:p>
  <html:p>
  Namely, I made my own command that queries Anki for the deck names, which you can then pick from using telescope pickers. When you select one it will create a new flashcard in a specified flashcard directory under a directory created based on the deck name. You can then send this card to that deck using the existing <html:code>AnkiSend</html:code> command.
  </html:p>
  <html:p>I also continued the snippet fun here. When writing Anki cards, you can write latex code between [latex] [/latex] delimiters. I wrote a quick function to detect whether we are in these delimiters and if we are then to load the latex snippets from the previous section. I also added some basic anki filetype plugins to insert things like these delimiters.</html:p>
</fr:mainmatter></fr:tree>

  <fr:tree show-metadata="false"><fr:frontmatter><fr:authors><fr:author><fr:link href="/kellenkanarios/" title="Kellen Kanarios" uri="https://kellenkanarios.com/kellenkanarios/" display-uri="kellenkanarios" type="local">Kellen Kanarios</fr:link></fr:author></fr:authors><fr:date><fr:year>2025</fr:year><fr:month>3</fr:month><fr:day>4</fr:day></fr:date><fr:title text="Formatters and Linters">Formatters and Linters</fr:title></fr:frontmatter><fr:mainmatter>
  <html:code>compat.nvim</html:code>, <html:code>mason.nvim</html:code>, black, isort.
</fr:mainmatter></fr:tree>
<html:script src="https://utteranc.es/client.js" repo="kkanarios32/website-comments" issue-term="nvim" theme="boxy-light" crossorigin="anonymous" async="" /></fr:mainmatter>
  <fr:backmatter>
    <fr:tree show-metadata="false" hidden-when-empty="true">
      <fr:frontmatter>
        <fr:authors />
        <fr:title text="References">References</fr:title>
      </fr:frontmatter>
      <fr:mainmatter />
    </fr:tree>
    <fr:tree show-metadata="false" hidden-when-empty="true">
      <fr:frontmatter>
        <fr:authors />
        <fr:title text="Context">Context</fr:title>
      </fr:frontmatter>
      <fr:mainmatter>
        <fr:tree show-metadata="true" expanded="false" toc="false" numbered="false">
          <fr:frontmatter>
            <fr:authors>
              <fr:author>
                <fr:link href="/kellenkanarios/" title="Kellen Kanarios" uri="https://kellenkanarios.com/kellenkanarios/" display-uri="kellenkanarios" type="local">Kellen Kanarios</fr:link>
              </fr:author>
            </fr:authors>
            <fr:date>
              <fr:year>2024</fr:year>
              <fr:month>10</fr:month>
              <fr:day>29</fr:day>
            </fr:date>
            <fr:uri>https://kellenkanarios.com/0002/</fr:uri>
            <fr:display-uri>0002</fr:display-uri>
            <fr:route>/0002/</fr:route>
            <fr:title text="Blog">Blog</fr:title>
          </fr:frontmatter>
          <fr:mainmatter>
            <html:p>This is my blog, in which I write about a variety of topics including computer science, mathematics, and more. For more short-form blogs, see the <fr:link href="/007L/" title="Marginalia" uri="https://kellenkanarios.com/007L/" display-uri="007L" type="local">marginalia</fr:link>. See <fr:link href="/007M/" title="Upcoming Blogs" uri="https://kellenkanarios.com/007M/" display-uri="007M" type="local">upcoming blogs</fr:link> and feel free to request! This blog also has a corresponding <fr:link href="/0002/atom.xml" type="external">Atom feed</fr:link>.</html:p>
            <fr:tree show-metadata="true" expanded="false" toc="false" numbered="false">
              <fr:frontmatter>
                <fr:authors>
                  <fr:author>
                    <fr:link href="/kellenkanarios/" title="Kellen Kanarios" uri="https://kellenkanarios.com/kellenkanarios/" display-uri="kellenkanarios" type="local">Kellen Kanarios</fr:link>
                  </fr:author>
                </fr:authors>
                <fr:date>
                  <fr:year>2025</fr:year>
                  <fr:month>3</fr:month>
                  <fr:day>4</fr:day>
                </fr:date>
                <fr:uri>https://kellenkanarios.com/005F/</fr:uri>
                <fr:display-uri>005F</fr:display-uri>
                <fr:route>/005F/</fr:route>
                <fr:title text="Rebuilding My (Neo)Vim Config From Scratch">Rebuilding My (Neo)Vim Config From Scratch</fr:title>
              </fr:frontmatter>
              <fr:mainmatter><html:p>I have been using LazyVim for some time now, but I have now run into issues multiple times where understanding how LazyVim is doing something is far more difficult than if I had written my own setup. I allocated one day for this adventure and really just wanted to make sure I had support for <fr:tex display="inline"><![CDATA[\TeX ]]></fr:tex>, python, forester, and C/C++. Due to my (self-imposed) time constraint, I do not have the associated resources linked for each of the things discussed below. At some point, I hope to come back and more thoroughly cover each of the components.
</html:p>
  <fr:tree show-metadata="false"><fr:frontmatter><fr:authors><fr:author><fr:link href="/kellenkanarios/" title="Kellen Kanarios" uri="https://kellenkanarios.com/kellenkanarios/" display-uri="kellenkanarios" type="local">Kellen Kanarios</fr:link></fr:author></fr:authors><fr:date><fr:year>2025</fr:year><fr:month>3</fr:month><fr:day>4</fr:day></fr:date><fr:title text="Sane Defaults">Sane Defaults</fr:title></fr:frontmatter><fr:mainmatter>
To my surprise, a lot of the features that I had come to take for granted were actually options set up internally by Lazyvim. For example, I was shocked with 8 space indents!! and I could not even copy from one terminal instance to another... Due to this, I went and found all of the options I liked from Lazyvim and added them to my new configuration in <html:code>configs/options.lua</html:code>.
</fr:mainmatter></fr:tree>

  <fr:tree show-metadata="false"><fr:frontmatter><fr:authors><fr:author><fr:link href="/kellenkanarios/" title="Kellen Kanarios" uri="https://kellenkanarios.com/kellenkanarios/" display-uri="kellenkanarios" type="local">Kellen Kanarios</fr:link></fr:author></fr:authors><fr:date><fr:year>2025</fr:year><fr:month>3</fr:month><fr:day>4</fr:day></fr:date><fr:title text="Installing a Plugin Manager">Installing a Plugin Manager</fr:title></fr:frontmatter><fr:mainmatter>
For this, we will be using the defacto standard <html:code>lazy.nvim</html:code>. This is actually straightforward and kind of "just works". Just follow the installation guide in their documentation.
</fr:mainmatter></fr:tree>

  <fr:tree show-metadata="false"><fr:frontmatter><fr:authors><fr:author><fr:link href="/kellenkanarios/" title="Kellen Kanarios" uri="https://kellenkanarios.com/kellenkanarios/" display-uri="kellenkanarios" type="local">Kellen Kanarios</fr:link></fr:author></fr:authors><fr:date><fr:year>2025</fr:year><fr:month>3</fr:month><fr:day>4</fr:day></fr:date><fr:title text="Setting up Auto Complete">Setting up Auto Complete</fr:title></fr:frontmatter><fr:mainmatter>
This is one of the main motivations for me making the switch. It seems <html:code>nvim-cmp</html:code> has finally been replaced with a new <html:code>blink.cmp</html:code>, so that is what we will be using.


  <fr:tree show-metadata="false"><fr:frontmatter><fr:authors><fr:author><fr:link href="/kellenkanarios/" title="Kellen Kanarios" uri="https://kellenkanarios.com/kellenkanarios/" display-uri="kellenkanarios" type="local">Kellen Kanarios</fr:link></fr:author></fr:authors><fr:date><fr:year>2025</fr:year><fr:month>3</fr:month><fr:day>4</fr:day></fr:date><fr:title text="Rebuilding My (Neo)Vim Config From Scratch › Language Server Protocol"><fr:link href="/005F/" title="Rebuilding My (Neo)Vim Config From Scratch" uri="https://kellenkanarios.com/005F/" display-uri="005F" type="local">Rebuilding My (Neo)Vim Config From Scratch</fr:link> › Language Server Protocol</fr:title></fr:frontmatter><fr:mainmatter>
It turns out there is a lot that goes into getting LSP setup correctly.
<html:ol><html:li>First we must actually install the language servers. To do this the easiest way, we use the <html:code>mason.nvim</html:code> and <html:code>mason.nvim-lspconfig</html:code> plugins. At some point, I might actually figure out how to set up lsp myself without lspconfig but that point is not now.
</html:li>
<html:li>Through <html:code>nvim-lspconfig</html:code>, we can set up each of the servers we want to have LSP support. I just set up clangd, pyright, and texlab.</html:li></html:ol>
This was a bit ridiculous. The first of many challenges was around import resolution in python. To remedy this, I needed to write a function to find the virtual environment directory and then set the <html:code>pythonPath</html:code> to the venv python binary. Previously, I think I was just using pylsp and installing it as a pip package to each python venv. I much prefer the new way, and I think pyright is overall a much better lsp.
</fr:mainmatter></fr:tree>


  <fr:tree show-metadata="false"><fr:frontmatter><fr:authors><fr:author><fr:link href="/kellenkanarios/" title="Kellen Kanarios" uri="https://kellenkanarios.com/kellenkanarios/" display-uri="kellenkanarios" type="local">Kellen Kanarios</fr:link></fr:author></fr:authors><fr:date><fr:year>2025</fr:year><fr:month>3</fr:month><fr:day>4</fr:day></fr:date><fr:title text="Rebuilding My (Neo)Vim Config From Scratch › Forester Completion"><fr:link href="/005F/" title="Rebuilding My (Neo)Vim Config From Scratch" uri="https://kellenkanarios.com/005F/" display-uri="005F" type="local">Rebuilding My (Neo)Vim Config From Scratch</fr:link> › Forester Completion</fr:title></fr:frontmatter><fr:mainmatter>
  Another necessary completion source for me is the one provided by <html:code>forester.nvim</html:code>. Similar to vimtex, the reference completion support is VERY useful. Obviously, I need completion when I am writing this blog!!! This was a little more involved. The first difficulty was that the completion source provided by the <html:code>forester.nvim</html:code> plugin was for <html:code>nvim-cmp</html:code>. It turns out this is a prevalent enough problem that the author of <html:code>blink.cmp</html:code> wrote an additional plugin <html:code>blink.compat</html:code> to allow for <html:code>nvim-cmp</html:code> completion sources. While this sounds all fine and good, <html:code>nvim-compat</html:code> expects plugins that return the completion source themselves, whereas in <html:code>forester.nvim</html:code> the completion source is just one submodule of a more feature-rich plugin. To get around this, I needed to look into the <html:code>blink.compat</html:code> code and find how they are registering the sources and just do it myself.
</fr:mainmatter></fr:tree>

</fr:mainmatter></fr:tree>

  <fr:tree show-metadata="false"><fr:frontmatter><fr:authors><fr:author><fr:link href="/kellenkanarios/" title="Kellen Kanarios" uri="https://kellenkanarios.com/kellenkanarios/" display-uri="kellenkanarios" type="local">Kellen Kanarios</fr:link></fr:author></fr:authors><fr:date><fr:year>2025</fr:year><fr:month>3</fr:month><fr:day>4</fr:day></fr:date><fr:title text="Snippets">Snippets</fr:title></fr:frontmatter><fr:mainmatter>
  <html:p>
  Going all the way back to the <fr:link href="https://castel.dev/post/lecture-notes-1/" type="external">Gilles Castel blog post</fr:link>, I have always been partial to snippets that auto-expand. I had them set up prior to Lazyvim but with Lazyvim I had resigned to using friendly-snippets with native nvim snippets. Since I was already redoing everything, this time around I decided not to compromise. Once upon a time (right when it came out I think?) I tried out Luasnips, but it seems that they now have far more extensive features. They are also natively supported by <html:code>blink.cmp</html:code>!! It feels necessary that I plug the <fr:link href="https://github.com/iurimateus/luasnip-latex-snippets.nvim" type="external">awesome repo</fr:link> that ports the original Ultisnips snippets to Luasnip. With this, I was able to easily add my own forester snippets!!!
  </html:p>
  <html:p>
  A fun little thing that I had been hoping to do for awhile and is finally now possible - I can load latex snippets when inside math environments in forester!!!! To do this, I looked into the forester treesitter grammar and found the corresponding nodetypes for math envs. It was then straightforward to detect whether we were in a math env and to load the associated latex snippets.
  </html:p>
</fr:mainmatter></fr:tree>

  <fr:tree show-metadata="false"><fr:frontmatter><fr:authors><fr:author><fr:link href="/kellenkanarios/" title="Kellen Kanarios" uri="https://kellenkanarios.com/kellenkanarios/" display-uri="kellenkanarios" type="local">Kellen Kanarios</fr:link></fr:author></fr:authors><fr:date><fr:year>2025</fr:year><fr:month>3</fr:month><fr:day>4</fr:day></fr:date><fr:title text="Anki">Anki</fr:title></fr:frontmatter><fr:mainmatter>
  <html:p>
  There is a very cool add-on to anki called <fr:link href="https://git.sr.ht/~foosoft/anki-connectdeck-actions" type="external">AnkiConnect</fr:link> that has an associated plugin <html:code>anki.nvim</html:code>. Basically, AnkiConnects allows you to make requests to Anki and receive/send useful information from/to your decks. Unfortunately, <html:code>anki.nvim</html:code> built-in commands didn't seem all that useful to me. However, it provided the necessary infrastructure for me to accomplish my desired workflow.
  </html:p>
  <html:p>
  Namely, I made my own command that queries Anki for the deck names, which you can then pick from using telescope pickers. When you select one it will create a new flashcard in a specified flashcard directory under a directory created based on the deck name. You can then send this card to that deck using the existing <html:code>AnkiSend</html:code> command.
  </html:p>
  <html:p>I also continued the snippet fun here. When writing Anki cards, you can write latex code between [latex] [/latex] delimiters. I wrote a quick function to detect whether we are in these delimiters and if we are then to load the latex snippets from the previous section. I also added some basic anki filetype plugins to insert things like these delimiters.</html:p>
</fr:mainmatter></fr:tree>

  <fr:tree show-metadata="false"><fr:frontmatter><fr:authors><fr:author><fr:link href="/kellenkanarios/" title="Kellen Kanarios" uri="https://kellenkanarios.com/kellenkanarios/" display-uri="kellenkanarios" type="local">Kellen Kanarios</fr:link></fr:author></fr:authors><fr:date><fr:year>2025</fr:year><fr:month>3</fr:month><fr:day>4</fr:day></fr:date><fr:title text="Formatters and Linters">Formatters and Linters</fr:title></fr:frontmatter><fr:mainmatter>
  <html:code>compat.nvim</html:code>, <html:code>mason.nvim</html:code>, black, isort.
</fr:mainmatter></fr:tree>
<html:script src="https://utteranc.es/client.js" repo="kkanarios32/website-comments" issue-term="nvim" theme="boxy-light" crossorigin="anonymous" async="" /></fr:mainmatter>
            </fr:tree>
          </fr:mainmatter>
        </fr:tree>
      </fr:mainmatter>
    </fr:tree>
    <fr:tree show-metadata="false" hidden-when-empty="true">
      <fr:frontmatter>
        <fr:authors />
        <fr:title text="Backlinks">Backlinks</fr:title>
      </fr:frontmatter>
      <fr:mainmatter />
    </fr:tree>
    <fr:tree show-metadata="false" hidden-when-empty="true">
      <fr:frontmatter>
        <fr:authors />
        <fr:title text="Related">Related</fr:title>
      </fr:frontmatter>
      <fr:mainmatter />
    </fr:tree>
    <fr:tree show-metadata="false" hidden-when-empty="true">
      <fr:frontmatter>
        <fr:authors />
        <fr:title text="Contributions">Contributions</fr:title>
      </fr:frontmatter>
      <fr:mainmatter />
    </fr:tree>
  </fr:backmatter>
</fr:tree>
