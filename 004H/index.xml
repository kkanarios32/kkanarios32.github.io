<?xml version="1.0" encoding="UTF-8"?>
<?xml-stylesheet type="text/xsl" href="/default.xsl"?>
<fr:tree xmlns:fr="http://www.forester-notes.org" xmlns:html="http://www.w3.org/1999/xhtml" xmlns:xml="http://www.w3.org/XML/1998/namespace" root="false" base-url="/">
  <fr:frontmatter>
    <fr:authors />
    <fr:date>
      <fr:year>2025</fr:year>
      <fr:month>2</fr:month>
      <fr:day>2</fr:day>
    </fr:date>
    <fr:uri>https://kellenkanarios.com/004H/</fr:uri>
    <fr:display-uri>004H</fr:display-uri>
    <fr:route>/004H/</fr:route>
    <fr:title text="The Computer in Computer Science">The Computer in Computer Science</fr:title>
  </fr:frontmatter>
  <fr:mainmatter>
    <html:p>Here I will be tracking and storing my daily progress on learning how a computer actually works. Throughout my CS degree, I have garnered a vague understanding of how a computer works, but I feel like I never really understood the big pictuer on how things actually go together. Here, I will try to re-learn / internalize computer architecture, operating systems, networking, compilers, etc. Hopefully, by the end I will understand how all these things interact and work together.</html:p>
    <fr:tree show-metadata="false">
      <fr:frontmatter>
        <fr:authors />
        <fr:date>
          <fr:year>2025</fr:year>
          <fr:month>2</fr:month>
          <fr:day>2</fr:day>
        </fr:date>
        <fr:title text="Reading List / Useful Resources">Reading List / Useful Resources</fr:title>
      </fr:frontmatter>
      <fr:mainmatter>
        <html:p>
          <html:ul><html:li><fr:link href="https://gee.cs.oswego.edu/dl/html/malloc.html" type="external">A Memory Allocator</fr:link></html:li>
      <html:li><fr:link href="https://wiki-prog.infoprepa.epita.fr/images/0/04/Malloc_tutorial.pdf" type="external">A Malloc Tutorial</fr:link></html:li>
      <html:li><fr:link href="https://github.com/DoctorWkt/acwj" type="external">A compiler writing journey</fr:link></html:li>
      <html:li><fr:link href="https://www.jmeiners.com/lc3-vm/" type="external">Writing your own Virtual Machine</fr:link></html:li>
      <html:li><fr:link href="http://www.catb.org/esr/structure-packing/" type="external">Struct alignment in C</fr:link></html:li>
      <html:li><fr:link href="https://maplant.com/2020-04-25-Writing-a-Simple-Garbage-Collector-in-C.html" type="external">Write a Simple Garbage Collector</fr:link></html:li>
      <html:li><fr:link href="https://stackoverflow.com/questions/2391679/why-do-we-need-virtual-functions-in-c" type="external">Virtual function explanation</fr:link></html:li>
      <html:li><fr:link href="https://arxiv.org/pdf/2309.04259" type="external">Interesting paper</fr:link></html:li>
      <html:li><fr:link href="https://beej.us/guide/bgnet/" type="external">BEEEEEEJ</fr:link></html:li></html:ul>
        </html:p>
      </fr:mainmatter>
    </fr:tree>
    <fr:tree show-metadata="false">
      <fr:frontmatter>
        <fr:authors />
        <fr:date>
          <fr:year>2025</fr:year>
          <fr:month>2</fr:month>
          <fr:day>2</fr:day>
        </fr:date>
        <fr:title text="Tentative plan of study">Tentative plan of study</fr:title>
      </fr:frontmatter>
      <fr:mainmatter>
        <html:ol><html:li>Work through three easy pieces. <fr:link href="https://pages.cs.wisc.edu/~shivaram/cs537-sp20/" type="external">Schedule</fr:link></html:li>
      <html:li>Work through TCP/IP illustrated.</html:li></html:ol>
      </fr:mainmatter>
    </fr:tree>
  </fr:mainmatter>
  <fr:backmatter>
    <fr:tree show-metadata="false" hidden-when-empty="true">
      <fr:frontmatter>
        <fr:authors />
        <fr:title text="References">References</fr:title>
      </fr:frontmatter>
      <fr:mainmatter />
    </fr:tree>
    <fr:tree show-metadata="false" hidden-when-empty="true">
      <fr:frontmatter>
        <fr:authors />
        <fr:title text="Context">Context</fr:title>
      </fr:frontmatter>
      <fr:mainmatter />
    </fr:tree>
    <fr:tree show-metadata="false" hidden-when-empty="true">
      <fr:frontmatter>
        <fr:authors />
        <fr:title text="Backlinks">Backlinks</fr:title>
      </fr:frontmatter>
      <fr:mainmatter>
        <fr:tree show-metadata="true" expanded="false" toc="false" numbered="false">
          <fr:frontmatter>
            <fr:authors>
              <fr:author>
                <fr:link href="/kellenkanarios/" title="Kellen Kanarios" uri="https://kellenkanarios.com/kellenkanarios/" display-uri="kellenkanarios" type="local">Kellen Kanarios</fr:link>
              </fr:author>
            </fr:authors>
            <fr:date>
              <fr:year>2025</fr:year>
              <fr:month>7</fr:month>
              <fr:day>1</fr:day>
            </fr:date>
            <fr:uri>https://kellenkanarios.com/0084/</fr:uri>
            <fr:display-uri>0084</fr:display-uri>
            <fr:route>/0084/</fr:route>
            <fr:title text="Notebook: Three Easy Pieces">Notebook: <fr:link href="/arpaci2018operating/" title="Operating Systems: Three Easy Pieces" uri="https://kellenkanarios.com/arpaci2018operating/" display-uri="arpaci2018operating" type="local">Three Easy Pieces</fr:link></fr:title>
          </fr:frontmatter>
          <fr:mainmatter>
            <html:p>Part of my <fr:link href="/004H/" title="The Computer in Computer Science" uri="https://kellenkanarios.com/004H/" display-uri="004H" type="local">revisiting CS fundamentals journey</fr:link></html:p>
            <fr:tree show-metadata="false">
              <fr:frontmatter>
                <fr:authors>
                  <fr:author>
                    <fr:link href="/kellenkanarios/" title="Kellen Kanarios" uri="https://kellenkanarios.com/kellenkanarios/" display-uri="kellenkanarios" type="local">Kellen Kanarios</fr:link>
                  </fr:author>
                </fr:authors>
                <fr:date>
                  <fr:year>2025</fr:year>
                  <fr:month>6</fr:month>
                  <fr:day>23</fr:day>
                </fr:date>
                <fr:uri>https://kellenkanarios.com/007V/</fr:uri>
                <fr:display-uri>007V</fr:display-uri>
                <fr:route>/007V/</fr:route>
                <fr:title text="#Deliberate-Practice (1/66): TPE Processes"><fr:link href="/007U/" title="#Deliberate-Practice" uri="https://kellenkanarios.com/007U/" display-uri="007U" type="local"><![CDATA[#Deliberate-Practice]]></fr:link> (1/66): <fr:link href="/arpaci2018operating/" title="Operating Systems: Three Easy Pieces" uri="https://kellenkanarios.com/arpaci2018operating/" display-uri="arpaci2018operating" type="local">TPE</fr:link> Processes</fr:title>
              </fr:frontmatter>
              <fr:mainmatter>
  <fr:tree show-metadata="false"><fr:frontmatter><fr:authors><fr:author><fr:link href="/kellenkanarios/" title="Kellen Kanarios" uri="https://kellenkanarios.com/kellenkanarios/" display-uri="kellenkanarios" type="local">Kellen Kanarios</fr:link></fr:author></fr:authors><fr:date><fr:year>2025</fr:year><fr:month>6</fr:month><fr:day>23</fr:day></fr:date><fr:title text="The Abstraction">The Abstraction</fr:title></fr:frontmatter><fr:mainmatter>
<html:p><html:em>A process</html:em> consists of a few primary components
<html:ol><html:li><html:strong>Memory</html:strong>: each process requires its own portion of memory for (i) to store the instructions of the program to execute and (ii) for the memory required by the calling program. This is referred to as the <html:em>address space</html:em>.</html:li>
  <html:li><html:strong>Registers</html:strong>: for those familiar with computers, instructions typically deal with registers, where information is loaded from memory into registers to perform computation. Additionally, there are special registers reserved for certain mechanisms i.e.
  <html:ul><html:li><html:strong>Program Counter (PC)</html:strong>: This register is in charge of telling us what instruction we are currently on in the executing program.</html:li>
    <html:li><html:strong>Stack and Frame Pointer:</html:strong> Used to manage where we currently are on the stack.</html:li></html:ul></html:li></html:ol></html:p>
</fr:mainmatter></fr:tree>

  <fr:tree show-metadata="false"><fr:frontmatter><fr:authors><fr:author><fr:link href="/kellenkanarios/" title="Kellen Kanarios" uri="https://kellenkanarios.com/kellenkanarios/" display-uri="kellenkanarios" type="local">Kellen Kanarios</fr:link></fr:author></fr:authors><fr:date><fr:year>2025</fr:year><fr:month>6</fr:month><fr:day>23</fr:day></fr:date><fr:title text="Process API">Process API</fr:title></fr:frontmatter><fr:mainmatter>
  <html:p>In order to implement a process, one must support each of the following operations</html:p>
  <html:ol><html:li><html:strong>Create:</html:strong> <html:p>The operating system must implement a mechanism to create a process. This consists of loading the program from disk, initializing memory (i.e. stack and heap), and jumping to <html:code>main</html:code> (typically).</html:p></html:li>

    <fr:tree show-metadata="false" toc="false"><fr:frontmatter><fr:authors><fr:author><fr:link href="/kellenkanarios/" title="Kellen Kanarios" uri="https://kellenkanarios.com/kellenkanarios/" display-uri="kellenkanarios" type="local">Kellen Kanarios</fr:link></fr:author></fr:authors><fr:date><fr:year>2025</fr:year><fr:month>6</fr:month><fr:day>23</fr:day></fr:date><fr:taxon>Remark</fr:taxon></fr:frontmatter><fr:mainmatter>
The stack is allocated up front and does not change. However, typically a small amount of memory is allocated for the heap and it grows via <html:code>malloc</html:code>. This is non-trivial because if <html:code>malloc</html:code> is called without available heap memory then memory must be allocated by the OS. I need to look into <fr:link href="https://gee.cs.oswego.edu/dl/html/malloc.html" type="external">how</fr:link> this is done more.
</fr:mainmatter></fr:tree>


    <fr:tree show-metadata="false" toc="false"><fr:frontmatter><fr:authors><fr:author><fr:link href="/kellenkanarios/" title="Kellen Kanarios" uri="https://kellenkanarios.com/kellenkanarios/" display-uri="kellenkanarios" type="local">Kellen Kanarios</fr:link></fr:author></fr:authors><fr:date><fr:year>2025</fr:year><fr:month>6</fr:month><fr:day>23</fr:day></fr:date><fr:taxon>Remark</fr:taxon></fr:frontmatter><fr:mainmatter>
  The OS will also initialize the parameters to <html:code>main</html:code> i.e. <html:code>argc</html:code> or <html:code>argv</html:code>.
</fr:mainmatter></fr:tree>

    <html:li><html:strong>Destroy:</html:strong> Clearly, if a process is misbehaved or the user just does not want it to run any longer, there must be some mechanism to <html:em>kill</html:em> the process.
      </html:li>
    <html:li><html:strong>Wait:</html:strong> In the case of dependencies (piping?), it may be useful to wait for a process to complete.
      </html:li>
    <html:li><html:strong>Miscellaneous Control:</html:strong> The example provided in the book is to <html:em>suspend</html:em> a process.
      </html:li>
    <html:li><html:strong>Status:</html:strong> It is helpful to be able to get information about running processes.
    </html:li></html:ol>
<html:p>There are also process <html:em>states</html:em>. These states are <html:strong>running</html:strong>, <html:strong>ready</html:strong>, and <html:strong>blocked</html:strong>. These states are pretty self-explanatory.
  </html:p>
</fr:mainmatter></fr:tree>

  <fr:tree show-metadata="false"><fr:frontmatter><fr:authors><fr:author><fr:link href="/kellenkanarios/" title="Kellen Kanarios" uri="https://kellenkanarios.com/kellenkanarios/" display-uri="kellenkanarios" type="local">Kellen Kanarios</fr:link></fr:author></fr:authors><fr:date><fr:year>2025</fr:year><fr:month>6</fr:month><fr:day>23</fr:day></fr:date><fr:title text="Data Structures">Data Structures</fr:title></fr:frontmatter><fr:mainmatter>
  <html:p>It seems throughout the book we will be seeing implementation examples from the smaller <fr:link href="https://github.com/mit-pdos/xv6-public" type="external">xv6</fr:link> OS.</html:p>
  
    <fr:tree show-metadata="false" toc="false"><fr:frontmatter><fr:authors><fr:author><fr:link href="/kellenkanarios/" title="Kellen Kanarios" uri="https://kellenkanarios.com/kellenkanarios/" display-uri="kellenkanarios" type="local">Kellen Kanarios</fr:link></fr:author></fr:authors><fr:date><fr:year>2025</fr:year><fr:month>6</fr:month><fr:day>23</fr:day></fr:date><fr:taxon>Remark</fr:taxon></fr:frontmatter><fr:mainmatter>
  In addition to the process implementation below, there is also a data structure that must keep track of all the processes. This is the <html:strong>process list</html:strong> or <html:strong>process control block</html:strong>.
  </fr:mainmatter></fr:tree>

<html:p><html:pre><![CDATA[// the registers xv6 will save and restore
// to stop and subsequently restart a process
struct context {
  int eip;
  int esp;
  int ebx;
  int ecx;
  int edx;
  int esi;
  int edi;
  int ebp;
};
// the different states a process can be in
enum proc_state { UNUSED, EMBRYO, SLEEPING, RUNNABLE, RUNNING, ZOMBIE };
// the information xv6 tracks about each process
// including its register context and state
struct proc {
  char *mem; // Start of process memory
  uint sz; // Size of process memory
  char *kstack; // Bottom of kernel stack for this process
  enum proc_state state; // Process state
  int pid; // Process ID
  struct proc *parent; // Parent process
  void *chan; // If non-zero, sleeping on chan
  int killed; // If non-zero, have been killed
  struct file *ofile[NOFILE]; // Open files
  struct inode *cwd; // Current directory
  struct context context; // Switch here to run process
  struct trapframe *tf; // Trap frame for the current interrupt
};]]></html:pre></html:p>
</fr:mainmatter></fr:tree>

  

  <fr:tree show-metadata="false" expanded="false"><fr:frontmatter><fr:authors><fr:author><fr:link href="/kellenkanarios/" title="Kellen Kanarios" uri="https://kellenkanarios.com/kellenkanarios/" display-uri="kellenkanarios" type="local">Kellen Kanarios</fr:link></fr:author></fr:authors><fr:date><fr:year>2025</fr:year><fr:month>6</fr:month><fr:day>23</fr:day></fr:date><fr:title text="Homework">Homework</fr:title></fr:frontmatter><fr:mainmatter>
  <html:ol><html:li>Run <html:code>process.py</html:code> with the flags <html:code>-l 5:100, 5:100</html:code>. What should the CPU utilization be?
    
    <fr:tree show-metadata="false" expanded="false" toc="false"><fr:frontmatter><fr:authors><fr:author><fr:link href="/kellenkanarios/" title="Kellen Kanarios" uri="https://kellenkanarios.com/kellenkanarios/" display-uri="kellenkanarios" type="local">Kellen Kanarios</fr:link></fr:author></fr:authors><fr:date><fr:year>2025</fr:year><fr:month>6</fr:month><fr:day>23</fr:day></fr:date><fr:taxon>Answer</fr:taxon></fr:frontmatter><fr:mainmatter>The flags correspond to running two processes each with <fr:tex display="inline"><![CDATA[5]]></fr:tex> instructions where each instruction has probability one of using the CPU. The output from the program is 
    <html:pre><![CDATA[  Process 0
    cpu
    cpu
    cpu
    cpu
    cpu

  Process 1
    cpu
    cpu
    cpu
    cpu
    cpu]]></html:pre>
    with this, we can conclude that the utilization is 100%. We will execute one instruction for the first process until it completes, then the five instructions of the next process. If both are waiting on IO, then I do not think this would be the case? 
    </fr:mainmatter></fr:tree>

    
 
   
   <fr:tree show-metadata="false" expanded="false" toc="false"><fr:frontmatter><fr:authors><fr:author><fr:link href="/kellenkanarios/" title="Kellen Kanarios" uri="https://kellenkanarios.com/kellenkanarios/" display-uri="kellenkanarios" type="local">Kellen Kanarios</fr:link></fr:author></fr:authors><fr:date><fr:year>2025</fr:year><fr:month>6</fr:month><fr:day>23</fr:day></fr:date><fr:taxon>Solution</fr:taxon></fr:frontmatter><fr:mainmatter>
    Using the solution flags <html:code>-cp</html:code>, there is 100% utilization. 
    </fr:mainmatter></fr:tree></html:li>
    <html:li>Run <html:code>process.py</html:code> with the flags <html:code>-l 4:100, 1:0</html:code>. How long does it take to complete both processes?
    
    <fr:tree show-metadata="false" expanded="false" toc="false"><fr:frontmatter><fr:authors><fr:author><fr:link href="/kellenkanarios/" title="Kellen Kanarios" uri="https://kellenkanarios.com/kellenkanarios/" display-uri="kellenkanarios" type="local">Kellen Kanarios</fr:link></fr:author></fr:authors><fr:date><fr:year>2025</fr:year><fr:month>6</fr:month><fr:day>23</fr:day></fr:date><fr:taxon>Answer</fr:taxon></fr:frontmatter><fr:mainmatter>The flags correspond to running one process with <fr:tex display="inline"><![CDATA[4]]></fr:tex> instructions with each instruction having probability one of using the CPU and one process with one instruction that uses the IO. The output from the program is 
    <html:pre><![CDATA[Process 0
  cpu
  cpu
  cpu
  cpu

Process 1
  io
  io_done]]></html:pre>
It will take <fr:tex display="inline"><![CDATA[4 + \text {time of IO}]]></fr:tex>. Since the process with <fr:tex display="inline"><![CDATA[4]]></fr:tex> non-IO-dependent instructions will run each of those instructions and then the next process will begin which must wait for the entire duration of IO.
    </fr:mainmatter></fr:tree>

    
 
   
   <fr:tree show-metadata="false" expanded="false" toc="false"><fr:frontmatter><fr:authors><fr:author><fr:link href="/kellenkanarios/" title="Kellen Kanarios" uri="https://kellenkanarios.com/kellenkanarios/" display-uri="kellenkanarios" type="local">Kellen Kanarios</fr:link></fr:author></fr:authors><fr:date><fr:year>2025</fr:year><fr:month>6</fr:month><fr:day>23</fr:day></fr:date><fr:taxon>Solution</fr:taxon></fr:frontmatter><fr:mainmatter>Using the <html:code>-cp</html:code> flags it takes <fr:tex display="inline"><![CDATA[11]]></fr:tex> timesteps to complete which is <fr:tex display="inline"><![CDATA[\approx  4 + \text {time of IO}]]></fr:tex>.
  </fr:mainmatter></fr:tree></html:li>
<html:li>
Now switch the order of the processes: <html:code>./process-run.py -l
1:0,4:100</html:code>. What happens now? Does switching the order mat-
ter? Why?
  
    <fr:tree show-metadata="false" expanded="false" toc="false"><fr:frontmatter><fr:authors><fr:author><fr:link href="/kellenkanarios/" title="Kellen Kanarios" uri="https://kellenkanarios.com/kellenkanarios/" display-uri="kellenkanarios" type="local">Kellen Kanarios</fr:link></fr:author></fr:authors><fr:date><fr:year>2025</fr:year><fr:month>6</fr:month><fr:day>23</fr:day></fr:date><fr:taxon>Answer</fr:taxon></fr:frontmatter><fr:mainmatter>
The output of the code is
    <html:pre><![CDATA[Process 0
  io
  io_done

Process 1
  cpu
  cpu
  cpu
  cpu]]></html:pre>
    Depending on the time of IO (<html:code>the -L flag</html:code>), it should take <fr:tex display="inline"><![CDATA[\max (5, 1 + \text {time IO})]]></fr:tex>. Switching the order does matter because we can run the CPU instructions while waiting for non-blocking IO. This motivates the idea of scheduling.
  </fr:mainmatter></fr:tree>

  
 
   
   <fr:tree show-metadata="false" expanded="false" toc="false"><fr:frontmatter><fr:authors><fr:author><fr:link href="/kellenkanarios/" title="Kellen Kanarios" uri="https://kellenkanarios.com/kellenkanarios/" display-uri="kellenkanarios" type="local">Kellen Kanarios</fr:link></fr:author></fr:authors><fr:date><fr:year>2025</fr:year><fr:month>6</fr:month><fr:day>23</fr:day></fr:date><fr:taxon>Solution</fr:taxon></fr:frontmatter><fr:mainmatter>
    It only takes <fr:tex display="inline"><![CDATA[7]]></fr:tex> timesteps because we are able to perform the IO operations off the CPU as expected.
  </fr:mainmatter></fr:tree></html:li>
  <html:li>
We’ll now explore some of the other flags. One important flag is <html:code>-S</html:code>, which determines how the system reacts when a process issues an I/O. With the flag set to <html:code>SWITCH_ON_END</html:code>, the system will NOT switch to another process while one is doing I/O, instead waiting until the process is completely finished. What happens when you run the following two processes, one doing I/O and the other doing CPU work? (<html:code>-l 1:0,4:100 -c -S SWITCH_ON_END</html:code>)

    <fr:tree show-metadata="false" expanded="false" toc="false"><fr:frontmatter><fr:authors><fr:author><fr:link href="/kellenkanarios/" title="Kellen Kanarios" uri="https://kellenkanarios.com/kellenkanarios/" display-uri="kellenkanarios" type="local">Kellen Kanarios</fr:link></fr:author></fr:authors><fr:date><fr:year>2025</fr:year><fr:month>6</fr:month><fr:day>23</fr:day></fr:date><fr:taxon>Answer</fr:taxon></fr:frontmatter><fr:mainmatter>
  The output of the code is:
<html:pre><![CDATA[Time        PID: 0        PID: 1           CPU           IOs
  1         RUN:io         READY             1          
  2        BLOCKED         READY                           1
  3        BLOCKED         READY                           1
  4        BLOCKED         READY                           1
  5        BLOCKED         READY                           1
  6        BLOCKED         READY                           1
  7*   RUN:io_done         READY             1          
  8           DONE       RUN:cpu             1          
  9           DONE       RUN:cpu             1          
 10           DONE       RUN:cpu             1          
 11           DONE       RUN:cpu             1]]></html:pre>
As expected, it runs the IO process, blocking the CPU process until it is completed.
</fr:mainmatter></fr:tree></html:li>
    <html:li>Now, run the same processes, but with the switching behavior set
to switch to another process whenever one is <html:code>WAITING</html:code> for I/O (<html:code>-l 1:0,4:100 -c -S SWITCH ON IO</html:code>). What happens now? Use <html:code>-c</html:code>
and <html:code>-p</html:code> to confirm that you are right</html:li>

    <fr:tree show-metadata="false" expanded="false" toc="false"><fr:frontmatter><fr:authors><fr:author><fr:link href="/kellenkanarios/" title="Kellen Kanarios" uri="https://kellenkanarios.com/kellenkanarios/" display-uri="kellenkanarios" type="local">Kellen Kanarios</fr:link></fr:author></fr:authors><fr:date><fr:year>2025</fr:year><fr:month>6</fr:month><fr:day>23</fr:day></fr:date><fr:taxon>Answer</fr:taxon></fr:frontmatter><fr:mainmatter>
  I assume that at timestep <fr:tex display="inline"><![CDATA[1]]></fr:tex> we will still <html:code>RUN:io</html:code>. However, we will then switch the <html:code>PID: 1</html:code> for the next <fr:tex display="inline"><![CDATA[4]]></fr:tex> timesteps until it is completed. After one additional <html:code>BLOCKED</html:code> timestep, we will run <html:code>RUN:io_done</html:code> and complete both processes. 
</fr:mainmatter></fr:tree>


 
   
   <fr:tree show-metadata="false" expanded="false" toc="false"><fr:frontmatter><fr:authors><fr:author><fr:link href="/kellenkanarios/" title="Kellen Kanarios" uri="https://kellenkanarios.com/kellenkanarios/" display-uri="kellenkanarios" type="local">Kellen Kanarios</fr:link></fr:author></fr:authors><fr:date><fr:year>2025</fr:year><fr:month>6</fr:month><fr:day>23</fr:day></fr:date><fr:taxon>Solution</fr:taxon></fr:frontmatter><fr:mainmatter>
  The output of the code is:
  <html:pre><![CDATA[Time        PID: 0        PID: 1           CPU           IOs
  1         RUN:io         READY             1          
  2        BLOCKED       RUN:cpu             1             1
  3        BLOCKED       RUN:cpu             1             1
  4        BLOCKED       RUN:cpu             1             1
  5        BLOCKED       RUN:cpu             1             1
  6        BLOCKED          DONE                           1
  7*   RUN:io_done          DONE             1]]></html:pre>
</fr:mainmatter></fr:tree>
 

<html:li>
One other important behavior is what to do when an I/O completes. With -I IO RUN LATER, when an I/O completes, the process that issued it is not necessarily run right away; rather, whatever was running at the time keeps running. What happens when you run this combination of processes? (<html:code>./process-run.py -l 3:0,5:100,5:100,5:100 -S SWITCH ON IO -I IO RUN LATER -c -p</html:code>) Are system resources being effectively utilized?

    <fr:tree show-metadata="false" expanded="false" toc="false"><fr:frontmatter><fr:authors><fr:author><fr:link href="/kellenkanarios/" title="Kellen Kanarios" uri="https://kellenkanarios.com/kellenkanarios/" display-uri="kellenkanarios" type="local">Kellen Kanarios</fr:link></fr:author></fr:authors><fr:date><fr:year>2025</fr:year><fr:month>6</fr:month><fr:day>23</fr:day></fr:date><fr:taxon>Answer</fr:taxon></fr:frontmatter><fr:mainmatter>
  The resources are not efficiently utilized because we end up waiting until all of our CPU-bound processes finish before returning to the IO-bound process, which calls another <html:code>IO:run</html:code> and we do not get any concurrency benefit.
</fr:mainmatter></fr:tree>


 
   
   <fr:tree show-metadata="false" expanded="false" toc="false"><fr:frontmatter><fr:authors><fr:author><fr:link href="/kellenkanarios/" title="Kellen Kanarios" uri="https://kellenkanarios.com/kellenkanarios/" display-uri="kellenkanarios" type="local">Kellen Kanarios</fr:link></fr:author></fr:authors><fr:date><fr:year>2025</fr:year><fr:month>6</fr:month><fr:day>23</fr:day></fr:date><fr:taxon>Solution</fr:taxon></fr:frontmatter><fr:mainmatter>
  The code output is pretty long but the end output is
  <html:pre><![CDATA[Stats: Total Time 31
Stats: CPU Busy 21 (67.74%)
Stats: IO Busy  15 (48.39%)]]></html:pre>
</fr:mainmatter></fr:tree></html:li>
<html:li>
Now run the same processes, but with <html:code>-I IO RUN IMMEDIATE</html:code> set, which immediately runs the process that issued the I/O. How does this behavior differ? Why might running a process that just completed an I/O again be a good idea?

    <fr:tree show-metadata="false" expanded="false" toc="false"><fr:frontmatter><fr:authors><fr:author><fr:link href="/kellenkanarios/" title="Kellen Kanarios" uri="https://kellenkanarios.com/kellenkanarios/" display-uri="kellenkanarios" type="local">Kellen Kanarios</fr:link></fr:author></fr:authors><fr:date><fr:year>2025</fr:year><fr:month>6</fr:month><fr:day>23</fr:day></fr:date><fr:taxon>Answer</fr:taxon></fr:frontmatter><fr:mainmatter>
  The behavior differs by returning to the IO-bound process, which can then immediately call the next <html:code>IO:run</html:code> before returning access to the CPU-bound processes, improving concurrency. In an attempt to predict the next IO call, it might be a good idea to run the process that just completed IO because it is more likely to make another IO call.
</fr:mainmatter></fr:tree>


 
   
   <fr:tree show-metadata="false" expanded="false" toc="false"><fr:frontmatter><fr:authors><fr:author><fr:link href="/kellenkanarios/" title="Kellen Kanarios" uri="https://kellenkanarios.com/kellenkanarios/" display-uri="kellenkanarios" type="local">Kellen Kanarios</fr:link></fr:author></fr:authors><fr:date><fr:year>2025</fr:year><fr:month>6</fr:month><fr:day>23</fr:day></fr:date><fr:taxon>Solution</fr:taxon></fr:frontmatter><fr:mainmatter>
  The corresponding statistics are
  <html:pre><![CDATA[Stats: Total Time 21
Stats: CPU Busy 21 (100.00%)
Stats: IO Busy  15 (71.43%)]]></html:pre>
</fr:mainmatter></fr:tree></html:li>
<html:li>
Now run with some randomly generated processes, e.g., <html:code>-s 1 -l
3:50,3:50, -s 2 -l 3:50,3:50, -s 3 -l 3:50,3:50</html:code>. See
if you can predict how the trace will turn out. What happens when
you use <html:code>-I IO RUN IMMEDIATE</html:code> vs. <html:code>-I IO RUN LATER</html:code>? What hap-
pens when you use <html:code>-S SWITCH ON IO</html:code> vs. <html:code>-S SWITCH ON END</html:code>?

    <fr:tree show-metadata="false" expanded="false" toc="false"><fr:frontmatter><fr:authors><fr:author><fr:link href="/kellenkanarios/" title="Kellen Kanarios" uri="https://kellenkanarios.com/kellenkanarios/" display-uri="kellenkanarios" type="local">Kellen Kanarios</fr:link></fr:author></fr:authors><fr:date><fr:year>2025</fr:year><fr:month>6</fr:month><fr:day>23</fr:day></fr:date><fr:taxon>Answer</fr:taxon></fr:frontmatter><fr:mainmatter>
  Since each instruction has a 50% chance of being CPU or I/O, I do not think there will be much benefit to <html:code>IO_RUN_LATER</html:code> vs. <html:code>IO_RUN_IMMEDIATE</html:code>. However, I believe it will be crucial to enable <html:code>-S SWITCH_ON_IO</html:code> over <html:code>-S SWITCH_ON_END</html:code> as the number of processes grow because we should always have waiting CPU instructions to run. In the case of two processes, we still may not improve that much because they will likely both be IO-bound at some point.
</fr:mainmatter></fr:tree>


 
   
   <fr:tree show-metadata="false" expanded="false" toc="false"><fr:frontmatter><fr:authors><fr:author><fr:link href="/kellenkanarios/" title="Kellen Kanarios" uri="https://kellenkanarios.com/kellenkanarios/" display-uri="kellenkanarios" type="local">Kellen Kanarios</fr:link></fr:author></fr:authors><fr:date><fr:year>2025</fr:year><fr:month>6</fr:month><fr:day>23</fr:day></fr:date><fr:taxon>Solution</fr:taxon></fr:frontmatter><fr:mainmatter>
  For <html:code>-s 1</html:code> (aka the seed), the observed performance between <html:code>IO_RUN_IMMEDIATE</html:code> and <html:code>IO_RUN_LATER</html:code> is the same. However, we do observe an improvement on both IO and CPU usage when we enable <html:code>SWITCH_ON_IO</html:code>.
</fr:mainmatter></fr:tree></html:li></html:ol>
  </fr:mainmatter></fr:tree>

</fr:mainmatter>
            </fr:tree>
            <fr:tree show-metadata="false">
              <fr:frontmatter>
                <fr:authors>
                  <fr:author>
                    <fr:link href="/kellenkanarios/" title="Kellen Kanarios" uri="https://kellenkanarios.com/kellenkanarios/" display-uri="kellenkanarios" type="local">Kellen Kanarios</fr:link>
                  </fr:author>
                </fr:authors>
                <fr:date>
                  <fr:year>2025</fr:year>
                  <fr:month>7</fr:month>
                  <fr:day>1</fr:day>
                </fr:date>
                <fr:uri>https://kellenkanarios.com/007Y/</fr:uri>
                <fr:display-uri>007Y</fr:display-uri>
                <fr:route>/007Y/</fr:route>
                <fr:title text="#Deliberate-Practice (3/66): TPE Process Interlude"><fr:link href="/007U/" title="#Deliberate-Practice" uri="https://kellenkanarios.com/007U/" display-uri="007U" type="local"><![CDATA[#Deliberate-Practice]]></fr:link> (3/66): <fr:link href="/arpaci2018operating/" title="Operating Systems: Three Easy Pieces" uri="https://kellenkanarios.com/arpaci2018operating/" display-uri="arpaci2018operating" type="local">TPE</fr:link> Process Interlude</fr:title>
              </fr:frontmatter>
              <fr:mainmatter><html:p>This was a very short chapter just introducing the actual API for some very important system calls. Namely</html:p>
  <fr:tree show-metadata="false" numbered="false"><fr:frontmatter><fr:authors><fr:author><fr:link href="/kellenkanarios/" title="Kellen Kanarios" uri="https://kellenkanarios.com/kellenkanarios/" display-uri="kellenkanarios" type="local">Kellen Kanarios</fr:link></fr:author></fr:authors><fr:date><fr:year>2025</fr:year><fr:month>7</fr:month><fr:day>1</fr:day></fr:date><fr:title text="fork()"><html:code>fork()</html:code></fr:title></fr:frontmatter><fr:mainmatter>
  <html:p>
The <html:em>fork</html:em> system call allows a program to duplicate itself in a new process from the current instruction. This is quite literally a duplication which entails giving the child its own
<html:ol><html:li>Address space</html:li>
  <html:li>Registers</html:li>
  <html:li>Program counter</html:li></html:ol></html:p>
<html:p>
A fork is invoked in the parent process like
  <html:pre><![CDATA[  int main()
    int rc = fork();
    if (rc < 0) 
      printf("error with fork");
    else if (rc == 0)
      printf("in child");
    else
      printf("in parent");]]></html:pre></html:p>
<html:p>
Importantly, you identify whether you are in the child or the parent via the return value of <html:code>rc</html:code> (0 for child), (PID of child for parent).
</html:p>

    <fr:tree show-metadata="false" toc="false" numbered="false"><fr:frontmatter><fr:authors><fr:author><fr:link href="/kellenkanarios/" title="Kellen Kanarios" uri="https://kellenkanarios.com/kellenkanarios/" display-uri="kellenkanarios" type="local">Kellen Kanarios</fr:link></fr:author></fr:authors><fr:date><fr:year>2025</fr:year><fr:month>7</fr:month><fr:day>1</fr:day></fr:date><fr:taxon>Remark</fr:taxon></fr:frontmatter><fr:mainmatter>
Which process is run first (the parent or the child) is non-deterministic and depends on the CPU scheduling algorithm.
</fr:mainmatter></fr:tree>

</fr:mainmatter></fr:tree>

  <fr:tree show-metadata="false" numbered="false"><fr:frontmatter><fr:authors><fr:author><fr:link href="/kellenkanarios/" title="Kellen Kanarios" uri="https://kellenkanarios.com/kellenkanarios/" display-uri="kellenkanarios" type="local">Kellen Kanarios</fr:link></fr:author></fr:authors><fr:date><fr:year>2025</fr:year><fr:month>7</fr:month><fr:day>1</fr:day></fr:date><fr:title text="wait()"><html:code>wait()</html:code></fr:title></fr:frontmatter><fr:mainmatter>
  <html:p>
  Due to the remark, we need some way to enforce ordering among parent and child. This is the motivation for the <html:em>wait</html:em> system call. Namely, when the parent calls <html:code>wait()</html:code> it tells the CPU not to schedule it until the child completes. 
  </html:p>
  
    <fr:tree show-metadata="false" toc="false" numbered="false"><fr:frontmatter><fr:authors><fr:author><fr:link href="/kellenkanarios/" title="Kellen Kanarios" uri="https://kellenkanarios.com/kellenkanarios/" display-uri="kellenkanarios" type="local">Kellen Kanarios</fr:link></fr:author></fr:authors><fr:date><fr:year>2025</fr:year><fr:month>7</fr:month><fr:day>1</fr:day></fr:date><fr:taxon>Question</fr:taxon></fr:frontmatter><fr:mainmatter>
    From the previous <fr:link href="/007V/" title="#Deliberate-Practice (1/66): TPE Processes" uri="https://kellenkanarios.com/007V/" display-uri="007V" type="local">section</fr:link>, we saw the data structure for a process included the state. I assume <html:code>wait()</html:code> is implemented by adjusting the process state in the PCB somehow?
  </fr:mainmatter></fr:tree>

  
    <fr:tree show-metadata="false" toc="false" numbered="false"><fr:frontmatter><fr:authors><fr:author><fr:link href="/kellenkanarios/" title="Kellen Kanarios" uri="https://kellenkanarios.com/kellenkanarios/" display-uri="kellenkanarios" type="local">Kellen Kanarios</fr:link></fr:author></fr:authors><fr:date><fr:year>2025</fr:year><fr:month>7</fr:month><fr:day>1</fr:day></fr:date><fr:taxon>Answer</fr:taxon></fr:frontmatter><fr:mainmatter>
    Doing a bit more research, it seems this is on the right track. Additionally, when a child completes it enters the <html:code>ZOMBIE</html:code> state, where it stores all the relevant information of the process, so that the parent process can then use this information. How this is actually coordinated seems to involve <html:em>signals</html:em> and <html:em>wait_entries</html:em> that essentially track all the children of a parent. The OS can then get a signal of completion from a child and find the corresponding parent?
  </fr:mainmatter></fr:tree>

</fr:mainmatter></fr:tree>

  <fr:tree show-metadata="false" numbered="false"><fr:frontmatter><fr:authors><fr:author><fr:link href="/kellenkanarios/" title="Kellen Kanarios" uri="https://kellenkanarios.com/kellenkanarios/" display-uri="kellenkanarios" type="local">Kellen Kanarios</fr:link></fr:author></fr:authors><fr:date><fr:year>2025</fr:year><fr:month>7</fr:month><fr:day>1</fr:day></fr:date><fr:title text="exec()"><html:code>exec()</html:code></fr:title></fr:frontmatter><fr:mainmatter>
<html:p>While <html:code>fork()</html:code> is useful in the sense that it allows us to spawn new processes from a parent process, it is still limited in that it can only execute instructions following the line of the <html:code>fork()</html:code> call in the parent process.</html:p>
<html:p>In practice, we do not want to have to compile massive C projects that contain all the necessary files for every possible binary we may want to run. To get around this, we can use the <html:code>exec()</html:code> system call. <html:code>exec()</html:code> allows us to transform a process into the desired executable. What this entails:
<html:ol><html:li>Loading the code and static data for the executable and overwriting the current coad and static data.</html:li>
  <html:li>Re-initializing stack and heap memory.</html:li>
  <html:li>Running the program, where the arguments passed to <html:code>exec()</html:code> are treated as <html:code>argv</html:code> for the program.</html:li></html:ol>
For a parent process to invoke <html:code>ls</html:code>, they could do something like
  <html:pre><![CDATA[  int main()
    int rc = fork();
    if (rc < 0) 
      printf("error with fork");
    else if (rc == 0)
      printf("in child");
      exec(ls);
    else
      printf("in parent");]]></html:pre>
  This spawns a child process and overwrites it with the <html:code>ls</html:code> executable.
</html:p>
</fr:mainmatter></fr:tree>

   
   <fr:tree show-metadata="false" toc="false" numbered="false"><fr:frontmatter><fr:authors><fr:author><fr:link href="/kellenkanarios/" title="Kellen Kanarios" uri="https://kellenkanarios.com/kellenkanarios/" display-uri="kellenkanarios" type="local">Kellen Kanarios</fr:link></fr:author></fr:authors><fr:date><fr:year>2025</fr:year><fr:month>7</fr:month><fr:day>1</fr:day></fr:date><fr:taxon>Example</fr:taxon></fr:frontmatter><fr:mainmatter>
Combining <html:code>fork()</html:code> and <html:code>exec()</html:code> is where the true power lies. In particular, with this combination you can practically implement an entire shell. Below is some (hybrid) pseudocode.
<html:pre><![CDATA[int main()
  while (true) {
    command = getcommand();
    int rc = fork();
    if (rc < 0) 
      printf("error with fork");
    else if (rc == 0)
      exec(command);
    else
      int rc = wait(NULL);
  }]]></html:pre>
You can also implement redirection by opening a file prior to calling <html:code>exec()</html:code> i.e.
<html:pre><![CDATA[int main()
  while (true) {
    command = getcommand();
    int rc = fork();
    if (rc < 0) 
      printf("error with fork");
    else if (rc == 0)
      close(STD_OUT_FILENO);
      open(output.txt);
      exec(command);
    else
      int rc = wait(NULL);
  }]]></html:pre>
</fr:mainmatter></fr:tree>
 

  <fr:tree show-metadata="false" numbered="false"><fr:frontmatter><fr:authors><fr:author><fr:link href="/kellenkanarios/" title="Kellen Kanarios" uri="https://kellenkanarios.com/kellenkanarios/" display-uri="kellenkanarios" type="local">Kellen Kanarios</fr:link></fr:author></fr:authors><fr:date><fr:year>2025</fr:year><fr:month>7</fr:month><fr:day>1</fr:day></fr:date><fr:title text="Signals">Signals</fr:title></fr:frontmatter><fr:mainmatter>
<html:p>They briefly mention <html:em>signals</html:em>: what I expect to be an important topic in the future. Namely, you can send a signall to a process via <html:code>kill()</html:code> and the recipient program can "catch" this signal via the system call <html:code>signal()</html:code>.
</html:p>
<html:p>This naturally leads to the introduction of a <html:em>user</html:em>. The <html:em>user</html:em> determines which processes they are allowed to signal, where the <html:em>superuser</html:em> can arbitrarily signal all processes.</html:p>
</fr:mainmatter></fr:tree>

  <fr:tree show-metadata="false" numbered="false"><fr:frontmatter><fr:authors><fr:author><fr:link href="/kellenkanarios/" title="Kellen Kanarios" uri="https://kellenkanarios.com/kellenkanarios/" display-uri="kellenkanarios" type="local">Kellen Kanarios</fr:link></fr:author></fr:authors><fr:date><fr:year>2025</fr:year><fr:month>7</fr:month><fr:day>1</fr:day></fr:date><fr:title text="Coding Exercise">Coding Exercise</fr:title></fr:frontmatter><fr:mainmatter>
TODO (Saturday / Sunday)
</fr:mainmatter></fr:tree>
</fr:mainmatter>
            </fr:tree>
          </fr:mainmatter>
        </fr:tree>
        <fr:tree show-metadata="true" expanded="false" toc="false" numbered="false">
          <fr:frontmatter>
            <fr:authors>
              <fr:author>
                <fr:link href="/kellenkanarios/" title="Kellen Kanarios" uri="https://kellenkanarios.com/kellenkanarios/" display-uri="kellenkanarios" type="local">Kellen Kanarios</fr:link>
              </fr:author>
            </fr:authors>
            <fr:date>
              <fr:year>2025</fr:year>
              <fr:month>2</fr:month>
              <fr:day>2</fr:day>
            </fr:date>
            <fr:uri>https://kellenkanarios.com/004I/</fr:uri>
            <fr:display-uri>004I</fr:display-uri>
            <fr:route>/004I/</fr:route>
            <fr:title text="Virtual Memory">Virtual Memory</fr:title>
          </fr:frontmatter>
          <fr:mainmatter>
            <html:p><fr:link href="/004H/" title="The Computer in Computer Science" uri="https://kellenkanarios.com/004H/" display-uri="004H" type="local"><![CDATA[ #CS]]></fr:link>
  In my foray into C programming, I have become thoroughly confused with virtual memory and the like. Mainly, what is malloc really doing? In the minimap2 library, they implement essentially their own memory management on top of malloc. The reason for this is what had me confused. I think the following summarizes my findings:
  <html:ul><html:li>When a process is started by the OS, it allocates virtual address space for the process.</html:li>
    <html:li>Within this virtual address space, malloc allocates memory on the heap. Namely, just returning a pointer (technically virtual address) to a block of memory of the desired size.</html:li>
    <html:ul><html:li>
      Malloc is an OS system call and therefore stops execution of all threads. 
      </html:li>
      <html:li>To get around this, they pre-allocate their own intra-thread memory (a large contiguous chunk) then allocate memory within this chunk throughout the program.</html:li></html:ul></html:ul></html:p>
          </fr:mainmatter>
        </fr:tree>
        <fr:tree show-metadata="true" expanded="false" toc="false" numbered="false">
          <fr:frontmatter>
            <fr:authors />
            <fr:date>
              <fr:year>2024</fr:year>
              <fr:month>12</fr:month>
              <fr:day>28</fr:day>
            </fr:date>
            <fr:uri>https://kellenkanarios.com/0025/</fr:uri>
            <fr:display-uri>0025</fr:display-uri>
            <fr:route>/0025/</fr:route>
            <fr:title text="Stack vs. Heap">Stack vs. Heap</fr:title>
          </fr:frontmatter>
          <fr:mainmatter><html:p><fr:link href="/004H/" title="The Computer in Computer Science" uri="https://kellenkanarios.com/004H/" display-uri="004H" type="local"><![CDATA[#CS]]></fr:link>. I often hear this question come up amongst performance-driven developers, and for the longest time I could never get a straight answer as to why the stack was so much better? After a long foray into the inner workings of how memory allocation is actually done, I think I finally have an answer. I do not want to forget this, so I am doing a quick write up here.</html:p>
  <fr:tree show-metadata="false"><fr:frontmatter><fr:authors /><fr:date><fr:year>2024</fr:year><fr:month>12</fr:month><fr:day>28</fr:day></fr:date><fr:title text="Why stack is faster.">Why stack is faster.</fr:title></fr:frontmatter><fr:mainmatter>
This all comes down to memory allocation. Prior to actually running the program, the operating system allocates some amount of memory for both the stack and the heap (I think around 2-4MB?).
<html:ul><html:li>Stack just increments stack pointer.</html:li>
    <html:li>Heap searches through <fr:link href="https://gee.cs.oswego.edu/dl/html/malloc.html" type="external">bins</fr:link>. 
    <html:ul><html:li>Apparently malloc is implemented via the <fr:link href="https://en.wikipedia.org/wiki/Buddy_memory_allocation" type="external">buddy algorithm</fr:link></html:li>
        <html:li>TODO: Look into this more.</html:li></html:ul></html:li>
    <html:li>Real speedup is when heap runs out of pre-allocated memory.
    <html:ul><html:li>Has to trap to OS to get more memory. Page-fault can result in write to disk and therefore eternal misery...</html:li>
      <html:li>Formally, this is known as "heap growth".</html:li></html:ul></html:li></html:ul>
</fr:mainmatter></fr:tree>
</fr:mainmatter>
        </fr:tree>
      </fr:mainmatter>
    </fr:tree>
    <fr:tree show-metadata="false" hidden-when-empty="true">
      <fr:frontmatter>
        <fr:authors />
        <fr:title text="Related">Related</fr:title>
      </fr:frontmatter>
      <fr:mainmatter />
    </fr:tree>
    <fr:tree show-metadata="false" hidden-when-empty="true">
      <fr:frontmatter>
        <fr:authors />
        <fr:title text="Contributions">Contributions</fr:title>
      </fr:frontmatter>
      <fr:mainmatter />
    </fr:tree>
  </fr:backmatter>
</fr:tree>
